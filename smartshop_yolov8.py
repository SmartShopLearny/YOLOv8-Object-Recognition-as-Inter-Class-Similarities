# -*- coding: utf-8 -*-
"""SmartShop_YOLOv8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IBkX_GmK7SPiRtelOjIEt41ZOsQGyxq7
"""

#connect google drive if you use google collab
from google.colab import drive
drive.mount('/content/drive')

#====================================================================="""#**I. Setup Library**"""==================================================
import os
import random
import shutil
from google.colab import drive
import json
import os
import yaml

#====================================================================="""#**II. Data Preparation**"""==================================================
#split Data
# Define paths to image and label folders
image_folder = '/content/drive/MyDrive/SmartShop_Resmed/resize_image'
label_folder = '/content/drive/MyDrive/SmartShop_Resmed/labels'

# Define paths to save the split datasets
train_image_folder = '/content/drive/MyDrive/datasets/train/images'
train_label_folder = '/content/drive/MyDrive/datasets/train/labels'
val_image_folder = '/content/drive/MyDrive/datasets/valid/images'
val_label_folder = '/content/drive/MyDrive/datasets/valid/labels'
test_image_folder = '/content/drive/MyDrive/datasets/test/images'
test_label_folder = '/content/drive/MyDrive/datasets/test/labels'

# Define the percentages of data to allocate to each split
train_split = 0.7
val_split = 0.2
test_split = 0.1

# Create the train, validation, and test folders if they don't exist
os.makedirs(train_image_folder, exist_ok=True)
os.makedirs(train_label_folder, exist_ok=True)
os.makedirs(val_image_folder, exist_ok=True)
os.makedirs(val_label_folder, exist_ok=True)
os.makedirs(test_image_folder, exist_ok=True)
os.makedirs(test_label_folder, exist_ok=True)

# Get a list of all image and label filenames
image_filenames = sorted(os.listdir(image_folder))
label_filenames = sorted(os.listdir(label_folder))

# Determine the number of images for each split
num_images = len(image_filenames)
num_train = int(num_images * train_split)
num_val = int(num_images * val_split)
num_test = num_images - num_train - num_val

# Copy the images and labels to the appropriate split folders
for i in range(num_images):
    image_filename = image_filenames[i]
    label_filename = label_filenames[i]
    if i < num_train:
        shutil.copy(os.path.join(image_folder, image_filename), train_image_folder)
        shutil.copy(os.path.join(label_folder, label_filename), train_label_folder)
    elif i < num_train + num_val:
        shutil.copy(os.path.join(image_folder, image_filename), val_image_folder)
        shutil.copy(os.path.join(label_folder, label_filename), val_label_folder)
    else:
        shutil.copy(os.path.join(image_folder, image_filename), test_image_folder)
        shutil.copy(os.path.join(label_folder, label_filename), test_label_folder)

"""## Make data.yaml"""
# Define the paths to the class and JSON files
class_file_path = '/content/drive/MyDrive/SmartShop_Resmed/classes.txt'
json_file_path = '/content/drive/MyDrive/SmartShop_Resmed/notes.json'
yaml_file_path = '/content/drive/MyDrive/dataset.yaml'

# Load the class names from the text file
with open(class_file_path, 'r') as f:
    class_names = [line.strip() for line in f.readlines()]

# Load the class IDs from the JSON file
with open(json_file_path, 'r') as f:
    class_ids = json.load(f)

# Define the class IDs and names
class_names = [line.strip() for line in open('/content/drive/MyDrive/SmartShop_Resmed/classes.txt')]
class_ids = {class_names[i]: i for i in range(len(class_names))}

# Define the categories list using the class IDs and names
categories = [{'id': class_ids[class_names[i]], 'name': class_names[i]} for i in range(len(class_names))]

# Define the dictionary to be converted to YAML
data = {'train': '/content/drive/MyDrive/SmartShop_Resmed/datasets/train',
        'val': '/content/drive/MyDrive/SmartShop_Resmed/datasets/valid',
        'nc': len(categories),
        'names': class_names,
        'backup': '/content/drive/MyDrive/SmartShop_Resmed/backup'}

# Add the categories list to the dictionary
data['categories'] = categories

# Convert the dictionary to YAML
yaml_data = yaml.dump(data)

# Save the YAML file
with open('/content/drive/MyDrive/SmartShop_Resmed/dataset.yaml', 'w') as f:
    f.write(yaml_data)

#====================================================================="""#**III. Model Preparation**"""==================================================
## Clone YOLOV8 Model"""
# Commented out IPython magic to ensure Python compatibility.
!git clone https://github.com/ultralytics/ultralytics
# %cd ultralytics
!pip install -e .
!nvidia-smi

# Pip install method (recommended)
!pip install ultralytics==8.0.20

from IPython import display #import image
display.clear_output() #clear output display

import ultralytics
ultralytics.checks()

from ultralytics import YOLO
from IPython.display import display, Image

#====================================================================="""#**III. Data Training**"""==================================================
!yolo task=detect mode=train model=yolov8n.pt data='/content/drive/MyDrive/SmartShop_Resmed/dataset.yaml' epochs=5 imgsz=314 plots=True

#====================================================================="""#**VI. Data Evaluation**"""==================================================
## Get Confusion_matrix"""
Image(filename='/content/ultralytics/runs/detect/train/confusion_matrix.png', width=600)

"""## Get the Graph Result"""
Image(filename='/content/ultralytics/runs/detect/train/results.png', width=600)

"""## **Show Prediction**"""
Image(filename='/content/ultralytics/runs/detect/train/val_batch0_pred.jpg', width=600)

"""## Validate Custom Model"""
!yolo task=detect mode=val model='/content/ultralytics/runs/detect/train/weights/best.pt' data='/content/drive/MyDrive/Models/YOLO8/Smartshop_manual/SmartRetail_data/dataset.yaml'

"""## Inference with Custom Model"""
!yolo task=detect mode=predict model='/content/ultralytics/runs/detect/train/weights/best.pt' conf=0.25 source='/content/drive/MyDrive/Models/YOLO8/Smartshop_manual/SmartRetail_data/datasets/test/images' save=True

"""## Display Image Prediction"""
import glob
from IPython.display import Image, display

for image_path in glob.glob('/content/ultralytics/runs/detect/predict/*.jpg')[:3]:
      display(Image(filename=image_path, width=600))
      print("\n")